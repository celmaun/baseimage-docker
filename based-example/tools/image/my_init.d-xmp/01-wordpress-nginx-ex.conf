# vim:set ft=properties :
##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
# inac
server {
        listen 80 default_server;
        # listen [::]:80 default_server;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.php index.html index.htm;

        server_name _;

            # Hide Nginx version number in 'Server' header
        server_tokens off;

        # WordPress https://wordpress.org/support/article/nginx/
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
        }

        location ^~ /wp-content/uploads/wc-logs/ {
            deny all;
        }

        location ^~ /wp-content/uploads/woocommerce_uploads/ {
            deny all;
        }

        location ^~ /wp-content/uploads/wpcf7_uploads/ {
            deny all;
        }


        # Deny hidden files and directories except ".well-known".
        location ~* /\.(?!well-known\/) {
            deny all;
        }

        # Block access to files that can expose sensitive information.
        # By default, block access to backup and source files that may be left by some
        # text editors and can pose a security risk when anyone has access to them.
        # Credit: https://github.com/h5bp/server-configs-nginx/blob/main/h5bp/location/security_file_access.conf#L39

        location ~* (?:#.*#|\.(?:bak|conf|dist|fla|in[ci]|log|orig|psd|sh|sql|sw[op])|~)$ {
          deny all;
        }

        # location ~* \.(js(\.map)?|css(\.map)?|png|jpg|jpeg|gif|ico|svg|webp)$ {
        #     # expires max;
        #     log_not_found off;
        # }

        # Assets, media
        location ~* \.(?:css(\.map)?|js(\.map)?|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv)$ {
          # expires    7d;
          # access_log off;
          log_not_found off;
        }

        # Composer
        location ~* ^/vendor(/|$) {
            deny all;
        }

        # Deny access to any files with a .php extension in the uploads directory
        # Works in sub-directory installs and also in multisite network
        # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
        location ~* /(?:uploads|files)/.*\.php$ {
            deny all;
        }

        location ~* ^/wp-content/plugins/akismet/ {
           deny all;
        }
 
        # Pass PHP scripts to FastCGI server
        # Note: Always put this last for security/precedence reasons
        location ~ \.php$ {
              include snippets/fastcgi-php.conf;

              set $fc_https $https;

              if ($http_x_forwarded_proto = https) {
                    set $fc_https on;
              }

               # Make php-fpm aware if this vhost is HTTPS enabled
               fastcgi_param HTTPS $fc_https if_not_empty;

               # With php-fpm (or other unix sockets):
               fastcgi_pass unix:/run/php/php7.4-fpm-hqdtaus-wp-pool.sock;
               # With php-cgi (or other tcp sockets):
               # fastcgi_pass 127.0.0.1:9000;

               # Determines whether FastCGI server responses with codes greater than or equal to 300 should be
               # passed to a client or be intercepted and redirected to nginx for processing with the error_page directive.
               fastcgi_intercept_errors on;
        }


        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to index.php.
                # Include the "?$args" part so non-default permalinks doesn't break when using query string
                try_files $uri $uri/ /index.php?$args;
        }
}
